<?php
/**
 * @file
 * Contains Group's implementation of the Node module hooks and forms.
 *
 * Please note that this is an additional layer on top of the Entity
 * implementation. For instance: we do not need hook_node_delete() because
 * our implementation of hook_entity_delete() covers everything.
 */

/**
 * Load our router functions without polluting the .module file.
 */
require_once 'gnode.router.inc';

/**
 * Implements hook_entity_info_alter().
 */
function gnode_entity_info_alter(&$entity_info) {
  // Nodes can only have one group parent.
  $entity_info['node']['group entity'] = 'single';
}

/**
 * Implements hook_group_permission().
 *
 * Polyfills permissions for the Node module and can therefore not reside
 * inside the gnode.group.inc file.
 */
function node_group_permission() {
  $permissions = array();

  foreach (node_type_get_types() as $node_type) {
    $replace = array('%node_type' => $node_type->name);

    $permissions["view $node_type->type node"] = array(
      'title' => t('%node_type: View content', $replace),
    );
    $permissions["create $node_type->type node"] = array(
      'title' => t('%node_type: Create new content', $replace),
    );
    $permissions["update own $node_type->type node"] = array(
      'title' => t('%node_type: Edit own content', $replace),
    );
    $permissions["update any $node_type->type node"] = array(
      'title' => t('%node_type: Edit any content', $replace),
    );
    $permissions["delete own $node_type->type node"] = array(
      'title' => t('%node_type: Delete own content', $replace),
    );
    $permissions["delete any $node_type->type node"] = array(
      'title' => t('%node_type: Delete any content', $replace),
    );
  }

  return $permissions;
}

/**
 * Implements hook_admin_paths().
 */
function gnode_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array('group/*/node/add/*' => TRUE);
  }
}

/**
 * Retrieve all group ids a user can create a node of a given type in.
 *
 * @param string $type
 *   The node type the user is attempting to create.
 * @param object $account
 *   (optional) The account of the user.
 *
 * @return array
 *   An array of group ids (gids).
 */
function gnode_group_node_create_gids($type, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // Determine whether the account could be 'anonymous' or 'outsider'.
  $account_exists = (bool) $account->uid;

  // If the user can bypass group access, return all group ids.
  if (user_access('bypass group access', $account)) {
    return db_select('groups', 'g')->fields('g')->execute()->fetchCol();
  }

  // Otherwise, start gathering group ids.
  $gids = array();

  // Check for all group types if a non-member can create nodes of the given
  // node type in them.
  foreach (group_types() as $group_type) {
    // Retrieve the permissions to check for creation rights.
    $check_permissions = $account_exists ? $group_type->outsider_permissions : $group_type->anonymous_permissions;

    $has_access = in_array('administer group', $check_permissions);
    $has_access = $has_access || in_array("create $type", $check_permissions);

    // If the group type allows access to non-members, we add all of the groups
    // the user is not a member of. This would be all groups in case we are
    // checking for an anonymous user.
    if ($has_access) {
      $gids = array_merge($gids, group_non_member_gids($account->uid, $group_type->name));
    }
  }

  // Add all of the user's groups in which he has creation rights.
  foreach (group_load_by_member($account->uid) as $group) {
    $has_access = group_access('administer group', $group, $account);
    $has_access = $has_access || group_access("create $type node", $group, $account);

    if ($has_access) {
      $gids[] = $group->gid;
    }
  }

  $gids = array_unique($gids);
  sort($gids);

  return $gids;
}

/**
 * Determines whether a user could create a node in a Group context.
 *
 * @param string $type
 *   The node type the user is attempting to create.
 * @param object $account
 *   (optional) The account of the user.
 *
 * @return bool
 *   Whether the user has creation rights.
 */
function gnode_group_node_create_access($type, $account = NULL) {
  // This flag can be manipulated to not have Group Node interfere with the
  // results of hook_node_access(). This can be useful if you need to figure
  // out whether a user had node creation rights before Group Node decided
  // to allow such action.
  $skip = &drupal_static(__FUNCTION__, FALSE);

  if ($skip) {
    return FALSE;
  }

  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  // If the user can bypass group access, he is allowed access.
  if (user_access('bypass group access', $account)) {
    return TRUE;
  }

  // Determine whether the account could be 'anonymous' or 'outsider'.
  $account_exists = (bool) $account->uid;

  // Check for all group types if a non-member can create nodes of the given
  // node type in them.
  foreach (group_types() as $group_type) {
    // Retrieve the permissions to check for creation rights.
    $check_permissions = $account_exists ? $group_type->outsider_permissions : $group_type->anonymous_permissions;

    $has_access = in_array('administer group', $check_permissions);
    $has_access = $has_access || in_array("create $type", $check_permissions);

    // If the group type allows access to non-members and the provided user
    // has as at least one group of this type he is not a member of, we allow
    // access.
    if ($has_access && group_non_member_gids($account->uid, $group_type->name)) {
      return TRUE;
    }
  }

  // Check the user's groups for creation rights.
  foreach (group_load_by_member($account->uid) as $group) {
    $has_access = group_access('administer group', $group, $account);
    $has_access = $has_access || group_access("create $type node", $group, $account);

    if ($has_access) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Determines whether a user could create a node in a site-wide context.
 *
 * This function does not take Group Node's hook_node_access() implementation
 * into account. It just figures out if a user can create a node outside of any
 * Group entity.
 *
 * This is mostly useful because in order to have Node behave properly, we need
 * to implement hook_node_access() just a little too permissive, making it hard
 * to find out what rights the user had before we started interfering.
 *
 * @param string $type
 *   The node type the user is attempting to create.
 * @param object $account
 *   (optional) The account of the user.
 *
 * @return bool
 *   Whether the user has creation rights.
 */
function gnode_global_node_create_access($type, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // In order to figure out whether the user can create nodes outside of a
  // group, we first have to delete the cached node_access entry for this node
  // type.
  $rights = &drupal_static('node_access', array());
  unset($rights[$account->uid][$type]['create']);

  // Then we flag gnode_group_node_create_access() to not interfere with the
  // results of node_access() and run the latter to get the result we want.
  $skip = &drupal_static('gnode_group_node_create_access');
  $skip = TRUE;
  $return = node_access('create', $type);

  // After we have established whether the user has global node creation
  // rights, we need to once again unflag gnode_group_node_create_access() and
  // remove the node type's (skewed) entry from the node_access() cache.
  $skip = FALSE;
  unset($rights[$account->uid][$type]['create']);

  // After all this, it is safe to return the retrieved result.
  return $return;
}

/**
 * Implements hook_node_access().
 *
 * Because the grant system for node access can quickly become very taxing on
 * the site's performance, we chose to implement hook_node_access() instead.
 *
 * All list query related alterations that would otherwise be taken care of by
 * the grant system still take place, albeit in Group Node's implementation of
 * hook_query_TAG_alter() for 'node_access'.
 *
 * @see gnode_query_node_access_alter()
 */
function gnode_node_access($node, $op, $account) {
  if (is_string($node)) {
    if ($op == 'create') {
      if (gnode_group_node_create_access($node, $account)) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  // Make sure we are dealing with a group node.
  elseif (!empty($node->group)) {
    $group = group_load($node->group);

    // If the user can bypass group access, he is allowed access.
    if (user_access('bypass group access', $account)) {
      return NODE_ACCESS_ALLOW;
    }

    $has_access = group_access('administer group', $group, $account);

    switch ($op) {
      case "view":
        $has_access = $has_access || group_access("view $node->type node", $group, $account);
        break;

      case "update":
      case "delete":
        $has_access = $has_access || group_access("$op any $node->type node", $group, $account);

        if ($account->uid == $node->uid) {
          $has_access = $has_access || group_access("$op own $node->type node", $group, $account);
        }

        break;
    }

    return $has_access ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Adds group data to the node add form.
 *
 * @param Group $group
 *   The group to create the node for.
 * @param string $node_type
 *   The type of node to create for the group.
 *
 * @return array
 *   Returns the node editing form.
 *
 * @see node_add()
 */
function gnode_node_add(Group $group, $node_type) {
  global $user;

  // Create an empty node to pass on to the node form.
  $types = node_type_get_types();
  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => $node_type,
    'language' => LANGUAGE_NONE,
    'group' => $group->gid,
  );

  // Set the page title to something different than the local action title.
  $message = 'Create @name in @group';
  $replace = array('@name' => $types[$node_type]->name, '@group' => $group->label());
  drupal_set_title(t($message, $replace), PASS_THROUGH);

  // Build the arguments to set in the form state. We ensure any extra URL
  // parameters will be passed on to the form builder as well. For instance:
  // group/1/node/add/page/specialvar will pass on the empty 'page' node as well
  // as the string "specialvar".
  $setup = array($node);
  $extra = array_slice(func_get_args(), 2);
  $args = array_merge($setup, $extra);

  // Build the form state, paying extra attention to two things: setting the
  // arguments as explained above and making sure the form will know to load
  // node.pages.inc whenever it's rebuilt.
  $form_state['build_info']['args'] = array_values($args);
  form_load_include($form_state, 'inc', 'node', 'node.pages');

  // Finally we build the form with our customized form state.
  return drupal_build_form($node_type . '_node_form', $form_state);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Adds a Group vertical tab to the node form.
 *
 * You can only select those groups that you can create nodes of this type in.
 * It would not make sense if someone could move nodes to a group where he does
 * not have creation rights.
 *
 * @see gnode_node_validate()
 * @see gnode_node_submit()
 */
function gnode_form_node_form_alter(&$form, $form_state) {
  $node = $form_state['node'];
  $gid = !empty($node->group) ? $node->group : 0;

  $can_bypass_access = user_access('bypass group access');

  // If the user can't bypass group access and we already have a nid or gid, we
  // are either on a node edit form or a Group Node add form. In such a case,
  // we do not show anything.
  if (!$can_bypass_access) {
    // Fix the group if the node was already set to one.
    if (!empty($gid)) {
      $form['gid'] = array(
        '#type' => 'value',
        '#value' => $gid,
        '#parents' => array('group_settings', 'gid'),
      );

      return;
    }
    // Do nothing if we are on an ungrouped node's edit form.
    elseif (!empty($node->nid)) {
      return;
    }
  }

  $global_node_create_access = gnode_global_node_create_access($node->type);
  $group_access_warning = t("<strong>By selecting a group, the node will inherit the group's access control</strong>.");

  // Otherwise add a vertical tab for group selection.
  $form['group_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Group settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('node-form-group-information'),
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'gnode') . '/misc/gnode.js'),
    ),
    '#tree' => TRUE,
    '#weight' => -50,
  );

  // Show a select of all the groups the author can create the node in.
  if (!$can_bypass_access) {
    $options = array();
    foreach (group_load_multiple(gnode_group_node_create_gids($node->type)) as $group) {
      $options[$group->gid] = $group->label() . " (GID: $group->gid)";
    }

    $description = $global_node_create_access
      ? t('Optionally select the group to attach this node to.')
      : t('Because you are not allowed to create this content outside of a group, you are required to select one here.');

    $form['group_settings']['gid'] = array(
      '#type' => 'select',
      '#title' => t('Parent group'),
      '#description' => $description . '<br />' . $group_access_warning,
      '#options' => $options,
      '#required' => !$global_node_create_access,
      '#empty_value' => '',
    );
  }

  // Show an autocomplete field to select the group with.
  else {
    $group_name = '';

    if ($gid) {
      // Retrieve the default value for the autocomplete field.
      $title = group_load($gid)->title;
      $group_name = "$title (GID: $gid)";
    }

    $description = $global_node_create_access
      ? t('Enter the name of the group to attach this node to. Leave blank for no group.')
      : t('Because you are not allowed to create this content outside of a group, you are required to enter the name of one here.');

    // There is a special use case where a user may edit global nodes, but
    // not create them and also may bypass group access. In such a case, he
    // could move an ungrouped node to a group, or leave it ungrouped.
    if (!empty($node->nid) && empty($gid) && !$global_node_create_access) {
      $description = t('This node is not attached to a group. In order to keep it that way, leave this field blank. Alternatively, you may enter the name of the group to attach this node to.');
      $description .= '<br />' . t('<strong>Warning:</strong> Because you are not allowed to create this content outside of a group, you will not be able to move it back to the sitewide scope.');
      $global_node_create_access = TRUE;
    }

    $form['group_settings']['group'] = array(
      '#type' => 'textfield',
      '#title' => t('Parent group'),
      '#autocomplete_path' => 'group/autocomplete',
      '#default_value' => $group_name,
      '#description' => $description . '<br />' . $group_access_warning,
      '#required' => !$global_node_create_access,
    );
  }
}

/**
 * Implements hook_node_validate().
 *
 * Validates and processes the 'parent group' field.
 *
 * @see gnode_form_node_form_alter()
 */
function gnode_node_validate($node, $form, &$form_state) {
  $values = $form_state['values']['group_settings'];

  if (!empty($values['group'])) {
    // Retrieve the group id from the name suffix.
    if ($gid = group_autocomplete_result_gid($values['group'])) {
      $form_state['values']['group_settings']['gid'] = $gid;
    }
    // Throw an error if the gid could not be retrieved.
    else {
      form_set_error('group_settings][group', t('Group name not found'));
    }
  }
}

/**
 * Implements hook_node_submit().
 *
 * @see gnode_form_node_form_alter()
 */
function gnode_node_submit($node, $form, &$form_state) {
  if (!empty($form_state['values']['group_settings']['gid'])) {
    $node->group = $form_state['values']['group_settings']['gid'];
  }
  elseif (isset($node->group)) {
    unset($node->group);
  }
}

/**
 * Helper function for gnode_query_node_access_alter().
 *
 * Provides access information to format query conditions with.
 *
 * @param object $account
 *   The user account to retrieve access info for.
 * @param string $op
 *   The node operation to retrieve access info for.
 *
 * @return array
 *   An associative array containing group ids the account has access to,
 *   subdivided in three categories which  are keyed as follows:
 *   - full access: For these group ids, the user has access to every node.
 *   - type access: Keyed by node type. For these group ids, the user has
 *     access to every node of the node type indicated by the array key.
 *   - user access: Keyed by node type. For these group ids, the user has
 *     access to every node of the node type indicated by the array key of
 *     which he is also the author.
 *
 * @see gnode_query_node_access_alter()
 */
function _gnode_node_access_info($account, $op) {
  // Initialize the array that will hold group ids.
  $return = array();

  // Gather the machine names of all node types.
  $node_types = array_keys(node_type_get_types());

  // Determine whether the account could be 'anonymous' or 'outsider'.
  $account_exists = (bool) $account->uid;

  // Check access for groups the user is not a member of.
  foreach (group_types() as $type => $group_type) {
    if ($non_member_gids = group_non_member_gids($account->uid, $type)) {
      // Retrieve the permissions to check for rights.
      $permissions = $account_exists ? $group_type->outsider_permissions : $group_type->anonymous_permissions;

      // If you can administer the group, you have full access to every node
      // in that group. Add these group ids to 'full access'.
      if (in_array('administer group', $permissions)) {
        foreach ($non_member_gids as $gid) {
          $return['full access'][$gid] = $gid;
        }
        continue;
      }

      foreach ($node_types as $node_type) {
        // Use booleans for readability's sake.
        $type_access = FALSE;
        $user_access = FALSE;

        switch ($op) {
          case 'view':
            $type_access = in_array("view $node_type node", $permissions);
            break;

          case 'update':
          case 'delete':
            $type_access = in_array("$op any $node_type node", $permissions);
            $user_access = in_array("$op own $node_type node", $permissions);
            break;
        }

        // If the user has access to this node type, we add all nodes of that
        // node type (within the given group) to the list of accessible nodes.
        if ($type_access) {
          foreach ($non_member_gids as $gid) {
            $return['type access'][$node_type][$gid] = $gid;
          }
        }

        // Otherwise, if the user has author access to this node type, we add
        // all nodes of that node type (within the given group) where the user
        // is the author to the list of accessible nodes.
        elseif ($user_access) {
          foreach ($non_member_gids as $gid) {
            $return['user access'][$node_type][$gid] = $gid;
          }
        }
      }
    }
  }

  // Check access for groups the user is a member of.
  foreach (group_load_by_member($account->uid) as $group) {
    // Store gid to keep code below concise.
    $gid = $group->gid;

    // If you can administer the group, you have full access to every node
    // in that group. Add these group ids to 'full access'.
    if (group_access('administer group', $group, $account)) {
      $return['full access'][$gid] = $gid;
      continue;
    }

    foreach ($node_types as $node_type) {
      // Use booleans for readability's sake.
      $type_access = FALSE;
      $user_access = FALSE;

      switch ($op) {
        case 'view':
          $type_access = group_access("view $node_type node", $group, $account);
          break;

        case 'update':
        case 'delete':
          $type_access = group_access("$op any $node_type node", $group, $account);
          $user_access = group_access("$op own $node_type node", $group, $account);
          break;
      }

      // If the user has access to this node type, we add all nodes of that
      // node type (within the given group) to the list of accessible nodes.
      if ($type_access) {
        $return['type access'][$node_type][$gid] = $gid;
      }

      // If the user has author access to this node type, we add all nodes of
      // that node type (within the given group) where the user is the author
      // to the list of accessible nodes.
      if ($user_access) {
        $return['user access'][$node_type][$gid] = $gid;
      }
    }
  }

  return $return;
}

/**
 * Retrieves the name of the field that is used as a foreign key to {node}.nid.
 *
 * @param string $table
 *   The name of the table.
 *
 * @return string|false
 *   The name of the field or FALSE if it could not be found.
 */
function _gnode_get_table_nid_reference($table) {
  // Retrieve the schema info.
  $schema = drupal_get_schema($table);

  // Loop over the foreign key definitions in search for a field that
  // references {node}.nid. In case we find one, we return the field's name.
  if (isset($schema['foreign keys'])) {
    foreach ($schema['foreign keys'] as $relation) {
      if ($relation['table'] === 'node') {
        // Loop over the foreign key entries in search for a nid reference.
        foreach ($relation['columns'] as $local => $foreign) {
          if ($foreign === 'nid') {
            return $local;
          }
        }
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @see _gnode_node_access_info()
 */
function gnode_query_node_access_alter(QueryAlterableInterface $query) {
  global $user;

  // Retrieve all query tables.
  $tables = $query->getTables();

  // Because this function requires the {node} table, search for its presence.
  foreach ($tables as $alias => $table_info) {
    if ($table_info['table'] == 'node') {
      $node_alias = $alias;
      break;
    }
  }

  // If we couldn't find the {node} table, we search for a table that has a
  // foreign key linking to it. If we find such a link, we store the table's
  // alias and field name to create a join with.
  if (empty($node_alias)) {
    // First we see if a base table is specified.
    $base_table = $query->getMetaData('base_table');

    // In case it is, we should look for a {node}.nid reference there.
    if (!empty($base_table)) {
      // Retrieve the alias from the list of tables.
      foreach ($tables as $alias => $table_info) {
        if ($table_info['table'] == $base_table) {
          $base_alias = $alias;
          break;
        }
      }

      // Store the {node}.nid reference in $base_field.
      if ($nid_field = _gnode_get_table_nid_reference($base_table)) {
        $base_field = $nid_field;
      }
    }
    // In case it isn't, we loop over all of the query's tables in search for
    // a table that we can link to the node table.
    else {
      // We go over all the tables in the query to find a base table.
      foreach ($tables as $alias => $table_info) {
        if (!($table_info instanceof SelectQueryInterface)) {
          if ($nid_field = _gnode_get_table_nid_reference($table_info['table'])) {
            $base_alias = $alias;
            $base_field = $nid_field;
            break;
          }
        }
      }
    }

    // If we still don't have a table and field to join {node} with, throw an
    // exception.
    if (empty($base_alias) || empty($base_field)) {
      throw new Exception(t('Query tagged for node access but there is no join possible to {node}. Add foreign keys to {node}.nid in schema to fix.'));
    }

    // Finally, join {node} with the query and store its alias.
    $node_alias = $query->join('node', 'n', "$base_alias.$base_field = n.nid");
  }

  // Read the account from the query, if provided.
  if (!$account = $query->getMetaData('account')) {
    $account = $user;
  }

  // Retrieve all node ids of group nodes along with their group id.
  $group_nodes = db_select('group_entity', 'ge');
  $group_nodes->addField('ge', 'gid');
  $group_nodes->addField('ge', 'entity_id');
  $group_nodes->condition('entity_type', 'node');

  // Store them by group id and as one big array of node ids.
  $group_nids = array();
  foreach ($group_nodes->execute() as $record) {
    $group_nids['all'][] = $record->entity_id;
    $group_nids[$record->gid][] = $record->entity_id;
  }

  // If there are no group nodes, there is nothing for us left to do.
  if (empty($group_nids['all'])) {
    return;
  }

  // Get a reference to the existing query conditions.
  $conditions = &$query->conditions();

  // Check for a node access query and store its condition index.
  $node_access_index = FALSE;
  foreach ($conditions as $index => $condition) {
    if ($index == '#conjunction') {
      continue;
    }

    if ($condition['value'] instanceof SelectQuery) {
      $tables = $condition['value']->getTables();

      if (isset($tables['na']['table']) && $tables['na']['table'] == 'node_access') {
        $node_access_index = $index;
        break;
      }
    }
  }

  // If the user can bypass group access, most of this function need not run.
  if (user_access('bypass group access', $account)) {
    // If there is no node access query and the user can bypass group access, we
    // do not need to alter the query. So exit the function early.
    if ($node_access_index === FALSE) {
      return;
    }

    // If there is a node access query, we only run it on non-group nodes,
    // meaning any group node passes the access checks.
    $node_access = db_or();

    // Store the original node access condition.
    $node_access_conditions = &$node_access->conditions();
    $node_access_conditions[0] = $conditions[$node_access_index];

    // Remove the node access condition from the top level conditions.
    unset($conditions[$node_access_index]);

    // Add our 'or is a group node' condition to node access checks.
    $node_access->condition("$node_alias.nid", $group_nids['all'], 'IN');

    // Finally, add our combined access check to the query.
    $query->condition($node_access);
  }

  // If the user can't bypass group access, we'll need to determine which
  // group nodes he has access to for the requested operation.
  else {
    // Read the operation from the query, if provided.
    if (!$op = $query->getMetaData('op')) {
      $op = 'view';
    }

    // Retrieve the group access condition info for this user and operation.
    $access_info = _gnode_node_access_info($account, $op);

    // This will be used to store conditions for group nodes.
    $group_access = db_or();

    // Retrieve all node ids of group nodes along with their group id.
    $group_nodes->addField('ge', 'gid');

    if (!empty($access_info['full access'])) {
      $query_nids = array();
      foreach (array_intersect_key($group_nids, $access_info['full access']) as $nids) {
        $query_nids = array_merge($query_nids, $nids);
      }

      if ($query_nids) {
        $group_access->condition("$node_alias.nid", $query_nids, 'IN');
      }
    }

    foreach (node_type_get_types() as $node_type => $type_info) {
      if (!empty($access_info['type access'][$node_type])) {
        $query_nids = array();
        foreach (array_intersect_key($group_nids, $access_info['type access'][$node_type]) as $nids) {
          $query_nids = array_merge($query_nids, $nids);
        }

        if ($query_nids) {
          $group_access->condition(db_and()
            ->condition("$node_alias.type", $node_type)
            ->condition("$node_alias.nid", $query_nids, 'IN')
          );
        }
      }

      if (!empty($access_info['user access'][$node_type])) {
        $query_nids = array();
        foreach (array_intersect_key($group_nids, $access_info['user access'][$node_type]) as $nids) {
          $query_nids = array_merge($query_nids, $nids);
        }

        if ($query_nids) {
          $group_access->condition(db_and()
            ->condition("$node_alias.uid", $account->uid)
            ->condition("$node_alias.type", $node_type)
            ->condition("$node_alias.nid", $query_nids, 'IN')
          );
        }
      }
    }

    // If there is no node access query and the user cannot bypass group
    // access, we need to add a condition checking whether the node is a
    // group node. In case it is, it needs to match group access conditions.
    if ($node_access_index === FALSE) {
      $group_access->condition("$node_alias.nid", $group_nids['all'], 'NOT IN');
      $query->condition($group_access);
    }

    // If there is a node access query, we need to add it to non-group nodes
    // only. Group nodes should still bypass node access and check only for
    // group access conditions.
    else {
      // We are about to put $group_access on the same level as $node_access.
      // However, in case $group_access is empty, this will cause a database
      // error to occur. To prevent this, we do nothing in said case. We take
      // the default '#conjunction' entry into account when checking.
      if (count($group_access->conditions()) < 2) {
        return;
      }

      $node_access = db_and();

      // Store the original node access condition.
      $node_access_conditions = &$node_access->conditions();
      $node_access_conditions[0] = $conditions[$node_access_index];

      // Remove the node access condition from the top level conditions.
      unset($conditions[$node_access_index]);

      // Add our 'not a group node' condition to node access checks.
      $node_access->condition("$node_alias.nid", $group_nids['all'], 'NOT IN');

      // Finally, add our combined access check to the query.
      $query->condition(db_or()
        ->condition($node_access)
        ->condition($group_access)
      );
    }
  }
}
